name: CD - Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOY_USER: deploy
  BACKUP_RETENTION_DAYS: 30

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT=${{ github.event.inputs.environment }}
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            ENVIRONMENT=production
          else
            ENVIRONMENT=staging
          fi
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "Deploying to: $ENVIRONMENT"

      - name: Check deployment window
        if: steps.environment.outputs.environment == 'production'
        run: |
          HOUR=$(date +%H)
          DAY=$(date +%u)
          
          # Don't deploy to production on weekends or outside business hours
          if [ $DAY -ge 6 ] || [ $HOUR -lt 9 ] || [ $HOUR -gt 17 ]; then
            echo "⚠️  Warning: Deploying outside of business hours"
            echo "Current time: $(date)"
          fi

  # Run tests if not skipped
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci && cd ..
          cd backend && npm ci && cd ..

      - name: Run tests
        run: |
          npm run test:ci
          npm run test:integration:ci

      - name: Run security checks
        run: |
          npm audit --production
          npm run security:check

  # Build and push Docker image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [pre-deploy, test]
    if: always() && needs.pre-deploy.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.pre-deploy.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.pre-deploy.outputs.version }}
            type=sha,prefix=${{ needs.pre-deploy.outputs.environment }}-
            type=raw,value=${{ needs.pre-deploy.outputs.environment }}-latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-deploy.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            ENVIRONMENT=${{ needs.pre-deploy.outputs.environment }}

  # Database backup before deployment
  backup:
    name: Backup Current Deployment
    runs-on: ubuntu-latest
    needs: [pre-deploy, build]
    environment: ${{ needs.pre-deploy.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets[format('{0}_HOST', needs.pre-deploy.outputs.environment)] }} >> ~/.ssh/known_hosts

      - name: Create backup
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ secrets[format('{0}_HOST', needs.pre-deploy.outputs.environment)] }} << 'EOF'
            cd /opt/shopify-seo-analyzer
            ./scripts/backup.sh full
            
            # Upload backup to S3
            BACKUP_FILE=$(ls -t /var/backups/shopify-seo-analyzer/backup-*.tar.gz | head -1)
            if [ -f "$BACKUP_FILE" ]; then
              aws s3 cp "$BACKUP_FILE" s3://${{ secrets.BACKUP_S3_BUCKET }}/pre-deploy/
            fi
          EOF

      - name: Verify backup
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ secrets[format('{0}_HOST', needs.pre-deploy.outputs.environment)] }} << 'EOF'
            # Check if backup was created
            BACKUP_FILE=$(ls -t /var/backups/shopify-seo-analyzer/backup-*.tar.gz | head -1)
            if [ -z "$BACKUP_FILE" ] || [ ! -f "$BACKUP_FILE" ]; then
              echo "❌ Backup failed!"
              exit 1
            fi
            echo "✅ Backup created: $BACKUP_FILE"
          EOF

  # Deploy to environment
  deploy:
    name: Deploy to ${{ needs.pre-deploy.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [pre-deploy, build, backup]
    environment: 
      name: ${{ needs.pre-deploy.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets[format('{0}_HOST', needs.pre-deploy.outputs.environment)] }} >> ~/.ssh/known_hosts

      - name: Deploy application
        id: deploy
        run: |
          # Set environment-specific variables
          DEPLOY_HOST=${{ secrets[format('{0}_HOST', needs.pre-deploy.outputs.environment)] }}
          APP_URL=${{ secrets[format('{0}_URL', needs.pre-deploy.outputs.environment)] }}
          
          echo "url=$APP_URL" >> $GITHUB_OUTPUT
          
          # Deploy using SSH
          ssh ${{ env.DEPLOY_USER }}@$DEPLOY_HOST << 'EOF'
            set -e
            
            # Navigate to deployment directory
            cd /opt/shopify-seo-analyzer
            
            # Pull latest changes
            git fetch origin
            git checkout ${{ github.sha }}
            
            # Update environment file
            cp .env.${{ needs.pre-deploy.outputs.environment }} .env
            
            # Pull new Docker images
            docker-compose pull
            
            # Run database migrations
            docker-compose run --rm app npm run migrate:prod
            
            # Deploy with zero downtime
            docker-compose up -d --no-deps --scale app=2 app
            
            # Wait for new containers to be healthy
            sleep 30
            
            # Stop old containers
            docker-compose up -d --no-deps --scale app=1 app
            
            # Clean up
            docker system prune -f
            
            echo "✅ Deployment completed"
          EOF

      - name: Run post-deployment tasks
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ secrets[format('{0}_HOST', needs.pre-deploy.outputs.environment)] }} << 'EOF'
            cd /opt/shopify-seo-analyzer
            
            # Clear cache
            docker-compose exec -T redis redis-cli FLUSHDB
            
            # Warm up cache
            docker-compose exec -T app node scripts/warm-cache.js
            
            # Update sitemap
            docker-compose exec -T app node scripts/generate-sitemap.js
            
            echo "✅ Post-deployment tasks completed"
          EOF

  # Health check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment to stabilize
        run: sleep 60

      - name: Run health checks
        id: health
        run: |
          APP_URL=${{ secrets[format('{0}_URL', needs.pre-deploy.outputs.environment)] }}
          
          # Check main health endpoint
          echo "Checking health endpoint..."
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/health)
          
          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "❌ Health check failed: HTTP $HEALTH_STATUS"
            exit 1
          fi
          
          # Check API endpoints
          echo "Checking API endpoints..."
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/api/status)
          
          if [ "$API_STATUS" != "200" ] && [ "$API_STATUS" != "401" ]; then
            echo "❌ API check failed: HTTP $API_STATUS"
            exit 1
          fi
          
          echo "✅ All health checks passed"

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke -- --url=${{ secrets[format('{0}_URL', needs.pre-deploy.outputs.environment)] }}

      - name: Check performance metrics
        run: |
          APP_URL=${{ secrets[format('{0}_URL', needs.pre-deploy.outputs.environment)] }}
          
          # Run Lighthouse CI
          npm install -g @lhci/cli
          lhci autorun --collect.url=$APP_URL --upload.target=temporary-public-storage

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy, health-check]
    if: failure() && needs.deploy.result == 'success'
    environment: ${{ needs.pre-deploy.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Rollback deployment
        run: |
          ssh ${{ env.DEPLOY_USER }}@${{ secrets[format('{0}_HOST', needs.pre-deploy.outputs.environment)] }} << 'EOF'
            cd /opt/shopify-seo-analyzer
            
            echo "🔄 Starting rollback..."
            
            # Run rollback script
            ./scripts/deploy.sh rollback
            
            echo "✅ Rollback completed"
          EOF

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🔄 Deployment rolled back",
              attachments: [{
                color: 'warning',
                fields: [
                  { title: 'Environment', value: '${{ needs.pre-deploy.outputs.environment }}', short: true },
                  { title: 'Version', value: '${{ needs.pre-deploy.outputs.version }}', short: true },
                  { title: 'Reason', value: 'Health checks failed', short: false }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy, health-check]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.health-check.result }}
          custom_payload: |
            {
              text: ${{ needs.health-check.result == 'success' && '✅ Deployment successful' || '❌ Deployment failed' }},
              attachments: [{
                color: '${{ needs.health-check.result == 'success' && 'good' || 'danger' }}',
                fields: [
                  { title: 'Environment', value: '${{ needs.pre-deploy.outputs.environment }}', short: true },
                  { title: 'Version', value: '${{ needs.pre-deploy.outputs.version }}', short: true },
                  { title: 'Deployed by', value: '${{ github.actor }}', short: true },
                  { title: 'Branch', value: '${{ github.ref_name }}', short: true },
                  { title: 'Commit', value: '${{ github.sha }}', short: false },
                  { title: 'URL', value: '${{ secrets[format('{0}_URL', needs.pre-deploy.outputs.environment)] }}', short: false }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ needs.health-check.result }}
          env: ${{ needs.pre-deploy.outputs.environment }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ secrets[format('{0}_URL', needs.pre-deploy.outputs.environment)] }}

      - name: Create release notes
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 Deployment Information
            
            - **Environment**: ${{ needs.pre-deploy.outputs.environment }}
            - **Version**: ${{ needs.pre-deploy.outputs.version }}
            - **Deployed by**: @${{ github.actor }}
            - **Deployment time**: ${{ github.event.head_commit.timestamp }}
            
            ## 📝 What's Changed
            
            ${{ github.event.head_commit.message }}
            
            ## 🔗 Links
            
            - [Application](${{ secrets[format('{0}_URL', needs.pre-deploy.outputs.environment)] }})
            - [Commit](${{ github.event.head_commit.url }})
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: ${{ needs.pre-deploy.outputs.environment != 'production' }}