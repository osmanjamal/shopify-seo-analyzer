name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'package*.json'
      - 'frontend/package*.json'
      - 'backend/package*.json'
      - 'Dockerfile'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - containers
          - secrets

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

env:
  SEVERITY_THRESHOLD: high

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # NPM Audit
      - name: Run npm audit
        id: npm-audit
        run: |
          echo "## NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "### Root project" >> $GITHUB_STEP_SUMMARY
          npm audit --production --audit-level=moderate >> $GITHUB_STEP_SUMMARY 2>&1 || true
          
          echo "### Frontend" >> $GITHUB_STEP_SUMMARY
          cd frontend && npm audit --production --audit-level=moderate >> $GITHUB_STEP_SUMMARY 2>&1 || true
          cd ..
          
          echo "### Backend" >> $GITHUB_STEP_SUMMARY
          cd backend && npm audit --production --audit-level=moderate >> $GITHUB_STEP_SUMMARY 2>&1 || true

      # Snyk scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=${{ env.SEVERITY_THRESHOLD }} --all-projects

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'shopify-seo-analyzer'
          path: '.'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental
            --log /tmp/dependency-check.log

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

      # Retire.js for JavaScript library scanning
      - name: Run Retire.js
        run: |
          npm install -g retire
          retire --outputformat json --outputpath retire-report.json || true
          
          if [ -f retire-report.json ]; then
            echo "## Retire.js Results" >> $GITHUB_STEP_SUMMARY
            cat retire-report.json | jq -r '.[] | "\(.file): \(.results[].vulnerabilities[].summary)"' >> $GITHUB_STEP_SUMMARY
          fi

      # License compliance check
      - name: License compliance check
        run: |
          npm install -g license-checker
          
          echo "## License Compliance" >> $GITHUB_STEP_SUMMARY
          license-checker --production --summary >> $GITHUB_STEP_SUMMARY
          
          # Check for problematic licenses
          PROBLEMATIC=$(license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0' --excludePrivatePackages 2>&1 | grep -c "error" || true)
          
          if [ "$PROBLEMATIC" -gt 0 ]; then
            echo "❌ Found packages with incompatible licenses" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Static code analysis
  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          queries: +security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      # Semgrep scanning
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/nodejs
            p/typescript
            p/react
          generateSarif: true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif

      # ESLint security plugin
      - name: Run ESLint security checks
        run: |
          npm install --save-dev eslint-plugin-security
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-security-report.json || true
          
          if [ -f eslint-security-report.json ]; then
            echo "## ESLint Security Results" >> $GITHUB_STEP_SUMMARY
            cat eslint-security-report.json | jq -r '.[] | select(.errorCount > 0 or .warningCount > 0) | "\(.filePath): \(.errorCount) errors, \(.warningCount) warnings"' >> $GITHUB_STEP_SUMMARY
          fi

      # Custom security rules
      - name: Check for hardcoded secrets
        run: |
          echo "## Checking for hardcoded secrets" >> $GITHUB_STEP_SUMMARY
          
          # Check for potential API keys
          if grep -r -E "(api_key|apikey|api-key)\s*[:=]\s*['\"][^'\"]{20,}['\"]" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=build .; then
            echo "❌ Found potential hardcoded API keys!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check for potential passwords
          if grep -r -E "(password|passwd|pwd)\s*[:=]\s*['\"][^'\"]+['\"]" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=build --exclude="*.test.*" --exclude="*.spec.*" .; then
            echo "⚠️  Found potential hardcoded passwords!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "✅ No obvious hardcoded secrets found" >> $GITHUB_STEP_SUMMARY

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: docker build -t shopify-seo-analyzer:scan .

      # Trivy scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'shopify-seo-analyzer:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      # Hadolint for Dockerfile linting
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-results.sarif

      # Docker Scout
      - name: Docker Scout CVEs
        uses: docker/scout-action@v1
        with:
          command: cves
          image: 'shopify-seo-analyzer:scan'
          sarif-file: scout-results.sarif
          summary: true

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Gitleaks
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # TruffleHog
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # Custom secret patterns
      - name: Check for custom secret patterns
        run: |
          echo "## Custom Secret Pattern Check" >> $GITHUB_STEP_SUMMARY
          
          # Check for JWT secrets
          if grep -r "JWT_SECRET\|SESSION_SECRET" .env.example; then
            echo "✅ Secrets properly documented in .env.example" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Ensure no actual .env files are committed
          if find . -name ".env" -not -path "*/node_modules/*" -not -path "*/.git/*" | grep -q .; then
            echo "❌ Found .env files in repository!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application
        run: |
          docker-compose up -d
          sleep 30

      - name: Check security headers
        run: |
          echo "## Security Headers Check" >> $GITHUB_STEP_SUMMARY
          
          # Check for important security headers
          HEADERS=$(curl -s -I http://localhost:3000)
          
          # Check X-Frame-Options
          if echo "$HEADERS" | grep -qi "X-Frame-Options"; then
            echo "✅ X-Frame-Options header present" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ X-Frame-Options header missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check X-Content-Type-Options
          if echo "$HEADERS" | grep -qi "X-Content-Type-Options: nosniff"; then
            echo "✅ X-Content-Type-Options header properly set" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ X-Content-Type-Options header missing or misconfigured" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Content-Security-Policy
          if echo "$HEADERS" | grep -qi "Content-Security-Policy"; then
            echo "✅ Content-Security-Policy header present" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Content-Security-Policy header missing" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Stop services
        if: always()
        run: docker-compose down

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, container-scan, secret-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate consolidated report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          # Add scan results summary
          echo "## Scan Results Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Code Scan: ${{ needs.code-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md

      - name: Create issue if vulnerabilities found
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Scan Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `The scheduled security scan has detected vulnerabilities.\n\nScan Results:\n- Dependency Scan: ${{ needs.dependency-scan.result }}\n- Code Scan: ${{ needs.code-scan.result }}\n- Container Scan: ${{ needs.container-scan.result }}\n- Secret Scan: ${{ needs.secret-scan.result }}\n\nPlease review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`,
              labels: ['security', 'vulnerability', 'automated']
            });
            
            console.log(`Created issue #${issue.data.number}`);

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🔒 Security scan detected vulnerabilities",
              attachments: [{
                color: 'danger',
                fields: [
                  { title: 'Repository', value: '${{ github.repository }}', short: true },
                  { title: 'Branch', value: '${{ github.ref_name }}', short: true },
                  { title: 'Triggered by', value: '${{ github.event_name }}', short: true },
                  { title: 'Severity', value: '${{ env.SEVERITY_THRESHOLD }}', short: true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}